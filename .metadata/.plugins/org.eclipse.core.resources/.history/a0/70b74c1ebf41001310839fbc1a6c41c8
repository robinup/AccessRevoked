package com.tapjoy.opt.conversion_matrix;

import java.io.ByteArrayInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Stack;

import org.apache.hadoop.hbase.KeyValue;
import org.apache.hadoop.hbase.client.Result;
import org.apache.log4j.Logger;

import com.tapjoy.opt.conversion_matrix.config.Configuration;
import com.tapjoy.opt.object_cache.TokenCache;
import com.tapjoy.opt.offerlist.CompoundRow;
import com.tapjoy.opt.offerlist.OfferList;
import com.tapjoy.opt.offerlist.OfferListWithref;
import com.tapjoy.opt.resource.OfferListComputeEngine;
import com.tapjoy.opt.resource.ResourceDataContainer;

import com.tapjoy.opt.common.HBaseConn;

public class ConversionMatrixOfferListComputeEngine extends OfferListComputeEngine {
	
	private static Logger logger = Logger.getLogger(OfferListComputeEngine.class);

	public ConversionMatrixOfferListComputeEngine(ResourceDataContainer dataContainer) {
		super(dataContainer);
	}

	@Override
	public boolean computeStaticSegments() {
		return false;
	}
	
	/**
	 *  Generate device-customized Offer list. 
	 */
	@Override
	public OfferList computeForDevice(String customizedKey, HashMap<String, String> specs, OfferList staticOL){
		// Get Conversion history from specs  -- LeiTest -- hack here

		//check HBase first -- LJ
		long startTS = System.nanoTime();
				
		String udid = specs.get("udid");
		String [] converHist  = getConversionHistoryFromHbase(udid);  //getRandomHistory(); -- LJ
		
		if(converHist != null && converHist.length > 0) 
		{
			String convtStr = "";
			
			for(String tmpstr: converHist)
			{
				convtStr += tmpstr+" ";
			}
			logger.info("udid "+udid+" history="+convtStr);
		}
		else
		{
			logger.info("udid "+udid+" no history or retrieval overtime; serving 324 list");
			specs.put("algorithm", Configuration.BACKUP_ALGO_ID);
			return staticOL;
		}
		
		if (specs.get("staticonly") != null) {
			converHist = null;
		}
		
		//convert the static offer list (generated by 324) to a map: <String offerid, CompoundRow offer>
		List<CompoundRow> combOffers = new LinkedList<CompoundRow> ();
		try
		{
			@SuppressWarnings("unchecked")
			List<CompoundRow> offers = (List<CompoundRow>)staticOL.getOffers();
		HashMap<String, CompoundRow> allOfferMap = new HashMap<String, CompoundRow>();

		Iterator<CompoundRow> iter = offers.iterator();
		while(iter.hasNext())
		{
			CompoundRow of = iter.next();
			allOfferMap.put(of.id, of);
		}
		
		HashSet<String> subqueset = new HashSet<String>();  //ensure that there is no redundant offers from history of more than one offer
		
		//top-k similarity search routine begins - by LJ
		//System.out.printf("top-k algo begins!\n");
		PriorityQueue<CompoundRow> cfmainque = new PriorityQueue<CompoundRow>(Configuration.OFFERWALL_CF_THRES, new CompoundRow.CompoundRowCompare());
		for (int i=0; converHist != null && i< converHist.length && i < Configuration.HIST_THRES;i++) {
			//need to retrieve the offer from string ids	
			PriorityQueue<CompoundRow> cfsubque = new PriorityQueue<CompoundRow>(Configuration.OFFERWALL_CF_THRES, new CompoundRow.CompoundRowCompare());
			CompoundRow tmpoffer = allOfferMap.get(converHist[i]);
			if(tmpoffer == null)
				continue;
			@SuppressWarnings("unchecked")
			HashMap <String, Float> histVals = (HashMap <String, Float>)((ConversionMatrixResourceDataContainer)dataContainer).conversionMatrix.get(converHist[i]);
			if (histVals == null) {
				continue;
			}
			Iterator <String> it = histVals.keySet().iterator();
			while (it.hasNext()) {
				String offerid = it.next();
				if(subqueset.contains(offerid))
					continue;
				CompoundRow tmpsimoffer = allOfferMap.get(offerid);
				if(tmpsimoffer == null)
					continue;
				Float score = histVals.get(offerid);
				if(cfsubque.size() >= Configuration.OFFERWALL_CF_THRES)
				{
					if(score > histVals.get(cfsubque.peek().id).floatValue())
					{
						cfsubque.poll();
						cfsubque.add(tmpsimoffer);
						subqueset.add(offerid);
					}
				}
				else
				{
					cfsubque.add(tmpsimoffer);
					subqueset.add(offerid);
				}			
			}
			
			//System.out.printf("cf subqueue size=%d\n", cfsubque.size());
		
			double minscore = Integer.MIN_VALUE; 
			
			if(!cfmainque.isEmpty())
				minscore = cfmainque.peek().score;
			
			while(cfsubque.peek().score < minscore)
			{
				cfsubque.poll();
			}
			
			while(!cfsubque.isEmpty())
			{
				CompoundRow tmpof = cfsubque.poll();
				double score = tmpof.score;
				if(cfmainque.size() >= Configuration.OFFERWALL_CF_THRES)
				{
					if(score > cfmainque.peek().score)
					{
						cfmainque.poll();
						cfmainque.add(tmpof);
					}
				}
				else
				{
					cfmainque.add(tmpof);
				}
			}
			//System.out.printf("cf mainqueue size=%d\n", cfmainque.size());
		}
		
		//System.out.printf("combination starts for top-k and generally top-ranked!!\n");
		HashMap<String, CompoundRow> queOffers = new HashMap<String, CompoundRow>();  //need to remove offers in the queue from the original list
		Stack<CompoundRow> bufOffers = new Stack<CompoundRow>();  //a buffer for reversing a min heap (max element should come first) 
		
		while(!cfmainque.isEmpty())
		{
			CompoundRow tmpoffer = cfmainque.poll();
			bufOffers.push(tmpoffer);
			queOffers.put(tmpoffer.id, tmpoffer);
		}	
		
		while(!bufOffers.isEmpty())
		{
			CompoundRow tmpoffer = bufOffers.pop();
			//System.out.printf("sim offers overall score=%f\n", tmpoffer.score);
			combOffers.add(tmpoffer);
		}
		
		Iterator<CompoundRow> it3 = offers.iterator();
		while(it3.hasNext())
		{
			CompoundRow tmpoffer = it3.next();
			if(queOffers.containsKey(tmpoffer.id))
				continue;
			combOffers.add(tmpoffer);
		}
		}
		catch(Exception e)
		{
			e.printStackTrace();
			specs.put("algorithm", Configuration.BACKUP_ALGO_ID);
			return staticOL;
		}
		
		OfferList custormizedOfferList = new OfferListWithref(customizedKey, combOffers, true);
		
		long endTS = System.nanoTime();
		System.out.println("680 real-time done for udid "+udid+" time=" + (endTS - startTS)+" ns");
		logger.info("680 real-time done for udid "+udid+" time=" + (endTS - startTS)+" ns");	
		return custormizedOfferList;
	}
	
	/**
	 * Get user conversion history from HBase
	 */
	private String [] getConversionHistoryFromHbase (String udid) {
		//System.out.println("let's get conversion history from HBase");
		if (udid == null || udid.length() < 1) {
			return null;
		}	
		
        Result res = HBaseConn.getOneRecordInTableWithTimeout(udid, TokenCache.getToken(0) ,((ConversionMatrixResourceDataContainer)dataContainer).auxtables, Configuration.HBASE_TIMEOUT_THRES, Configuration.HBASE_TRAFFIC_TIME);  //real-time query with pre-created table object
              
		if(res == null)
		{
			logger.info("udid "+udid+" HBase returns null");
			System.out.println("udid "+udid+" HBase returns null");
			return null;
		}
		else if(res.isEmpty())
		{
			logger.info("udid "+udid+" HBase returns empty");
			System.out.println("udid "+udid+" HBase returns empty");
			return null;
		}
		
		ArrayList<String> histids = new ArrayList<String>();
		
		for(KeyValue kv : res.raw()){		
			ByteArrayInputStream b = new ByteArrayInputStream(kv.getValue());
			ObjectInputStream o;
			String val = null;
			
			try {
				o = new ObjectInputStream(b);
				val = o.readObject().toString();
				System.out.println(val);
				logger.info(val);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (ClassNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
			if(val == null || val.equals("null"))
			{
				continue;
			}
			String [] hists =  val.split(",");
	        for (int i=0; i< hists.length; i++) {
	            //System.out.print(hist);
	            String hist = hists[i];
	            String [] details = hist.split("Z\\^"); 
	            if (details.length == 2) {
	                histids.add(details[1]);
	            }
	            else if(details.length == 1)
	            	histids.add(details[0]);
	        }
		}
        String[] reshist = new String[histids.size()];
        for(int i=0; i< histids.size() && i< Configuration.HIST_THRES; i++)
        {
        	reshist[i] = histids.get(i);
        }
        
        return reshist;
	}
}
